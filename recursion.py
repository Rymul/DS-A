# Recursive Subsets

def subsets(elements):
    """Returns a 2D list where each sublist represents one of the possible subsets of the list"""
    if len(elements) == 0:
        return [[]]
    first = elements[0]
    subs_without_first = subsets(elements[1:])
    subs_with_first = []
    for sub in subs_without_first:
        subs_with_first.append([first, *sub])
    return subs_with_first + subs_without_first

print(subsets(['a', 'b', 'c', 'd']))
print(subsets(['a', 'b', 'c', 'd', 'e', 'f']))

# Permutations

def permutations(items):
    """Returns a 2d list of all possible permutations"""
    if len(items) == 0:
        return [[]]
    first = items[0]
    res = []
    for perm in permutations(items[1:]):
        for i in range(len(perm) + 1):
            res.append(perm[:i] + [first] + perm[i:])
    return res

print(permutations(['cat', 'dog']))
print(permutations(['cat', 'dog', 'cow', 'duck']))
print(permutations([1,2,3,4,5,6]))


# Create Combinations 
def create_combinations(items, k):
    """Returns a 2d list of all possible combinations of a length k"""
    if len(items) < k:
        return []
    if k == 0:
        return [[]]

    first = items[0]
    partial_combos = create_combinations(items[1:], k -1)
    combos_with_first = []
    for combo in partial_combos:
        combos_with_first.append([first, *combo])

    combos_without_first = create_combinations(items[1:], k)
    return combos_with_first + combos_without_first

print(create_combinations(["a", "b", "c", "d"], 2))
print(create_combinations(["a", "b", "c", "d"], 3))

# Parenthetical Possiblities

def parenthetical_possibilities(s) -> list:
    """return a list of all strings that can be generated by
    expanding all parentheses of the string into its possibilities"""
    if len(s) == 0:
        return ['']

    result = []
    choices, remainder = get_choices(s)
    for choice in choices:
        remainder_possibilities = parenthetical_possibilities(remainder)
        result += [ choice + sub for sub in remainder_possibilities]
        # for possibility in remainder_possibilities:
        #   result.append(choice + possibility)

    return result

def get_choices(s) -> tuple:
    if s[0] == '(':
        end = s.index(')')
        choices = s[1:end]
        remainder = s[end +1:]
        return(choices, remainder)
    return (s[0], s[1:])

print(parenthetical_possibilities("(qr)ab(stu)c")) # [ 'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc' ]
print(parenthetical_possibilities("(etc)(blvd)(cat)"))
#  [
#  'ebc', 'eba', 'ebt', 'elc', 'ela',
#  'elt', 'evc', 'eva', 'evt', 'edc',
#  'eda', 'edt', 'tbc', 'tba', 'tbt',
#  'tlc', 'tla', 'tlt', 'tvc', 'tva',
#  'tvt', 'tdc', 'tda', 'tdt', 'cbc',
#  'cba', 'cbt', 'clc', 'cla', 'clt',
#  'cvc', 'cva', 'cvt', 'cdc', 'cda',
#  'cdt'
# ]


# Substitute Synonyms

def substitute_synonyms(sentence, synonyms):
    """returns a list containing all possible sentences that can
     be formed by substituting words of the sentence with their synonyms"""
    words = sentence.split(' ')
    sublists = generate(words, synonyms)
    return [ ' '.join(sublist) for sublist in sublists]
    # final_result = []
    # for sublist in sublists:
    #   final_result.append(' '.join(sublist))
    # return final_result

def generate(words, synonyms):
    if len(words) == 0:
        return [[]]

    first_word = words[0]
    remaining_words = words[1:]
    sublists = generate(remaining_words, synonyms)

    if first_word in synonyms:
        result = []
        for synonym in synonyms[first_word]:
            result += [ [synonym, *sublist] for sublist in sublists]
            # for sublist in sublists:
            #   result.append([ synonym, *sublist])
        return result
    else:
        # result += [ [first_word, *sublist] for sublist in sublists]
        result = []
        for sublist in sublists:
            result.append([ first_word, *sublist])
        return result

sent = "palms sweaty knees weak arms heavy"
syn = {
  "palms": ["hands", "fists"],
  "heavy": ["weighty", "hefty", "burdensome"],
  "weak": ["fragile", "feeble", "frail", "sickly"],
}
print(substitute_synonyms(sent, syn))
